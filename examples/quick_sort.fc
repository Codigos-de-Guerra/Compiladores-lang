// Implementation of the Quick Sort Algorithm.


function int partition(int# arr, int start, int end) {

	int pivot = arr[start];

	int count = 0;
	for (x i = start + 1; i <= end; i++) {
		if (arr[i] <= pivot) {
			count++;
		}
		endif
	}

	int pivotIndex = start + count;
	int tmp = arr[pivotIndex];
	arr[pivotIndex] = arr[start];
	arr[start] = tmp;

	int i = start;
	int j = end;

	loop {
		exit when (i >= pivotIndex or j <= pivotIndex);

		loop {
			exit when arr[i] > pivot;
			i++;
		}

		loop {
			exit when arr[j] <= pivot;
			j--;
		}

		if (i < pivotIndex && j > pivotIndex) {
			swap(arr[i++], arr[j--]);
		}
		endif
	}

	return pivotIndex;
}

function void quickSort(int# arr, int start, int end) {

	if (start >= end) {
		return;
	}
	endif

	int p = partition(arr, start, end);

	quickSort(arr, start, p - 1);

	quickSort(arr, p + 1, end);
}

function int main() {

	int# arr = { 9, 3, 4, 2, 1, 8 };
	int n = 6;

	quickSort(arr, 0, n - 1);

	return 0;
}

0 S
$  =>  S ::= program $
ID  =>  S ::= program $
CONST  =>  S ::= program $
FUNCTION  =>  S ::= program $
LEFT_PAREN  =>  S ::= program $
STRUCT  =>  S ::= program $
SEMICOLON  =>  S ::= program $
LEFT_BRACE  =>  S ::= program $
RETURN  =>  S ::= program $
BREAK  =>  S ::= program $
CONTINUE  =>  S ::= program $
EXIT  =>  S ::= program $
FOR  =>  S ::= program $
LOOP  =>  S ::= program $
IF  =>  S ::= program $
SWITCH  =>  S ::= program $
TERNARY  =>  S ::= program $
NOT  =>  S ::= program $
DECREMENT  =>  S ::= program $
INCREMENT  =>  S ::= program $
READ  =>  S ::= program $
WRITE  =>  S ::= program $
INT  =>  S ::= program $
REAL  =>  S ::= program $
CHAR  =>  S ::= program $
BOOL  =>  S ::= program $
STR  =>  S ::= program $
VOID  =>  S ::= program $
NUMBER  =>  S ::= program $
CHARACTER  =>  S ::= program $
TRUE  =>  S ::= program $
FALSE  =>  S ::= program $
STRING  =>  S ::= program $
================================
1 program
$  =>  program ::= stmts
ID  =>  program ::= stmts
CONST  =>  program ::= stmts
FUNCTION  =>  program ::= stmts
LEFT_PAREN  =>  program ::= stmts
STRUCT  =>  program ::= stmts
SEMICOLON  =>  program ::= stmts
LEFT_BRACE  =>  program ::= stmts
RETURN  =>  program ::= stmts
BREAK  =>  program ::= stmts
CONTINUE  =>  program ::= stmts
EXIT  =>  program ::= stmts
FOR  =>  program ::= stmts
LOOP  =>  program ::= stmts
IF  =>  program ::= stmts
SWITCH  =>  program ::= stmts
TERNARY  =>  program ::= stmts
NOT  =>  program ::= stmts
DECREMENT  =>  program ::= stmts
INCREMENT  =>  program ::= stmts
READ  =>  program ::= stmts
WRITE  =>  program ::= stmts
INT  =>  program ::= stmts
REAL  =>  program ::= stmts
CHAR  =>  program ::= stmts
BOOL  =>  program ::= stmts
STR  =>  program ::= stmts
VOID  =>  program ::= stmts
NUMBER  =>  program ::= stmts
CHARACTER  =>  program ::= stmts
TRUE  =>  program ::= stmts
FALSE  =>  program ::= stmts
STRING  =>  program ::= stmts
================================
2 stmts
$  =>  stmts ::= Îµ
ID  =>  stmts ::= stmt stmts
CONST  =>  stmts ::= stmt stmts
FUNCTION  =>  stmts ::= stmt stmts
LEFT_PAREN  =>  stmts ::= stmt stmts
STRUCT  =>  stmts ::= stmt stmts
SEMICOLON  =>  stmts ::= stmt stmts
LEFT_BRACE  =>  stmts ::= stmt stmts
RIGHT_BRACE  =>  stmts ::= Îµ
RETURN  =>  stmts ::= stmt stmts
BREAK  =>  stmts ::= stmt stmts
CONTINUE  =>  stmts ::= stmt stmts
EXIT  =>  stmts ::= stmt stmts
FOR  =>  stmts ::= stmt stmts
LOOP  =>  stmts ::= stmt stmts
IF  =>  stmts ::= stmt stmts
SWITCH  =>  stmts ::= stmt stmts
CASE  =>  stmts ::= Îµ
TERNARY  =>  stmts ::= stmt stmts
NOT  =>  stmts ::= stmt stmts
DECREMENT  =>  stmts ::= stmt stmts
INCREMENT  =>  stmts ::= stmt stmts
READ  =>  stmts ::= stmt stmts
WRITE  =>  stmts ::= stmt stmts
INT  =>  stmts ::= stmt stmts
REAL  =>  stmts ::= stmt stmts
CHAR  =>  stmts ::= stmt stmts
BOOL  =>  stmts ::= stmt stmts
STR  =>  stmts ::= stmt stmts
VOID  =>  stmts ::= stmt stmts
NUMBER  =>  stmts ::= stmt stmts
CHARACTER  =>  stmts ::= stmt stmts
TRUE  =>  stmts ::= stmt stmts
FALSE  =>  stmts ::= stmt stmts
STRING  =>  stmts ::= stmt stmts
================================
3 stmt
ID  =>  stmt ::= cmd
CONST  =>  stmt ::= cmd
FUNCTION  =>  stmt ::= decl_func
LEFT_PAREN  =>  stmt ::= cmd
STRUCT  =>  stmt ::= decl_struct
SEMICOLON  =>  stmt ::= cmd
LEFT_BRACE  =>  stmt ::= cmd
RETURN  =>  stmt ::= cmd
BREAK  =>  stmt ::= cmd
CONTINUE  =>  stmt ::= cmd
EXIT  =>  stmt ::= cmd
FOR  =>  stmt ::= cmd
LOOP  =>  stmt ::= cmd
IF  =>  stmt ::= cmd
SWITCH  =>  stmt ::= cmd
TERNARY  =>  stmt ::= cmd
NOT  =>  stmt ::= cmd
DECREMENT  =>  stmt ::= cmd
INCREMENT  =>  stmt ::= cmd
READ  =>  stmt ::= cmd
WRITE  =>  stmt ::= cmd
INT  =>  stmt ::= cmd
REAL  =>  stmt ::= cmd
CHAR  =>  stmt ::= cmd
BOOL  =>  stmt ::= cmd
STR  =>  stmt ::= cmd
VOID  =>  stmt ::= cmd
NUMBER  =>  stmt ::= cmd
CHARACTER  =>  stmt ::= cmd
TRUE  =>  stmt ::= cmd
FALSE  =>  stmt ::= cmd
STRING  =>  stmt ::= cmd
================================
4 all_decl_var
CONST  =>  all_decl_var ::= const_decl_var
INT  =>  all_decl_var ::= decl_var_prim
REAL  =>  all_decl_var ::= decl_var_prim
CHAR  =>  all_decl_var ::= decl_var_prim
BOOL  =>  all_decl_var ::= decl_var_prim
STR  =>  all_decl_var ::= decl_var_prim
VOID  =>  all_decl_var ::= decl_var_prim
================================
5 decl_var_prim
INT  =>  decl_var_prim ::= primitivos hashtagzeromais cochetezeromais ID
REAL  =>  decl_var_prim ::= primitivos hashtagzeromais cochetezeromais ID
CHAR  =>  decl_var_prim ::= primitivos hashtagzeromais cochetezeromais ID
BOOL  =>  decl_var_prim ::= primitivos hashtagzeromais cochetezeromais ID
STR  =>  decl_var_prim ::= primitivos hashtagzeromais cochetezeromais ID
VOID  =>  decl_var_prim ::= primitivos hashtagzeromais cochetezeromais ID
================================
6 assign_expr
ASSIGN  =>  assign_expr ::= ASSIGN expr
ASSIGN_PLUS  =>  assign_expr ::= assign_extra expr
ASSIGN_MINUS  =>  assign_expr ::= assign_extra expr
ASSIGN_MULT  =>  assign_expr ::= assign_extra expr
ASSIGN_DIV  =>  assign_expr ::= assign_extra expr
ASSIGN_MOD  =>  assign_expr ::= assign_extra expr
DECREMENT  =>  assign_expr ::= inc
INCREMENT  =>  assign_expr ::= inc
================================
7 inc_expr
DECREMENT  =>  inc_expr ::= inc ID
INCREMENT  =>  inc_expr ::= inc ID
================================
8 const_decl_var
CONST  =>  const_decl_var ::= CONST decl_var_prim
================================
9 decl_func
FUNCTION  =>  decl_func ::= FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN block
================================
10 decl_struct
STRUCT  =>  decl_struct ::= STRUCT ID block SEMICOLON
================================
11 block
LEFT_BRACE  =>  block ::= LEFT_BRACE stmts RIGHT_BRACE
================================
12 typedlpar
ID  =>  typedlpar ::= parameter typedlparAfter
RIGHT_PAREN  =>  typedlpar ::= Îµ
INT  =>  typedlpar ::= parameter typedlparAfter
REAL  =>  typedlpar ::= parameter typedlparAfter
CHAR  =>  typedlpar ::= parameter typedlparAfter
BOOL  =>  typedlpar ::= parameter typedlparAfter
STR  =>  typedlpar ::= parameter typedlparAfter
VOID  =>  typedlpar ::= parameter typedlparAfter
================================
13 typedlparAfter
RIGHT_PAREN  =>  typedlparAfter ::= Îµ
COMMA  =>  typedlparAfter ::= COMMA parameter typedlparAfter
================================
14 parameter
ID  =>  parameter ::= type parameterAfter
INT  =>  parameter ::= type parameterAfter
REAL  =>  parameter ::= type parameterAfter
CHAR  =>  parameter ::= type parameterAfter
BOOL  =>  parameter ::= type parameterAfter
STR  =>  parameter ::= type parameterAfter
VOID  =>  parameter ::= type parameterAfter
================================
15 parameterAfter
ID  =>  parameterAfter ::= ID
REFERENCE  =>  parameterAfter ::= REFERENCE ID
================================
16 cmd
ID  =>  cmd ::= idAfterRule SEMICOLON
CONST  =>  cmd ::= cmd_decl_var SEMICOLON
LEFT_PAREN  =>  cmd ::= expr_without_term SEMICOLON
SEMICOLON  =>  cmd ::= expr_without_term SEMICOLON
LEFT_BRACE  =>  cmd ::= block
RETURN  =>  cmd ::= RETURN expr SEMICOLON
BREAK  =>  cmd ::= BREAK SEMICOLON
CONTINUE  =>  cmd ::= CONTINUE SEMICOLON
EXIT  =>  cmd ::= EXIT WHEN expr SEMICOLON
FOR  =>  cmd ::= cmd_loop
LOOP  =>  cmd ::= cmd_loop
IF  =>  cmd ::= cmd_cond
SWITCH  =>  cmd ::= cmd_switch
TERNARY  =>  cmd ::= expr_without_term SEMICOLON
NOT  =>  cmd ::= expr_without_term SEMICOLON
DECREMENT  =>  cmd ::= idAfterRule SEMICOLON
INCREMENT  =>  cmd ::= idAfterRule SEMICOLON
READ  =>  cmd ::= inOut SEMICOLON
WRITE  =>  cmd ::= inOut SEMICOLON
INT  =>  cmd ::= cmd_decl_var SEMICOLON
REAL  =>  cmd ::= cmd_decl_var SEMICOLON
CHAR  =>  cmd ::= cmd_decl_var SEMICOLON
BOOL  =>  cmd ::= cmd_decl_var SEMICOLON
STR  =>  cmd ::= cmd_decl_var SEMICOLON
VOID  =>  cmd ::= cmd_decl_var SEMICOLON
NUMBER  =>  cmd ::= expr_without_term SEMICOLON
CHARACTER  =>  cmd ::= expr_without_term SEMICOLON
TRUE  =>  cmd ::= expr_without_term SEMICOLON
FALSE  =>  cmd ::= expr_without_term SEMICOLON
STRING  =>  cmd ::= expr_without_term SEMICOLON
================================
17 idAfterRule
ID  =>  idAfterRule ::= ID termAfter idAfterAfterRule
DECREMENT  =>  idAfterRule ::= inc ID cochetezeromais
INCREMENT  =>  idAfterRule ::= inc ID cochetezeromais
================================
18 idAfterAfterRule
ID  =>  idAfterAfterRule ::= ID hashtagzeromais cochetezeromais assign_expr_maybe
ASSIGN  =>  idAfterAfterRule ::= assign_expr
RIGHT_PAREN  =>  idAfterAfterRule ::= expr_binMaybe
SEMICOLON  =>  idAfterAfterRule ::= expr_binMaybe
MINUS  =>  idAfterAfterRule ::= expr_binMaybe
PLUS  =>  idAfterAfterRule ::= expr_binMaybe
DIV  =>  idAfterAfterRule ::= expr_binMaybe
TIMES  =>  idAfterAfterRule ::= expr_binMaybe
MOD  =>  idAfterAfterRule ::= expr_binMaybe
ASSIGN_PLUS  =>  idAfterAfterRule ::= assign_expr
ASSIGN_MINUS  =>  idAfterAfterRule ::= assign_expr
ASSIGN_MULT  =>  idAfterAfterRule ::= assign_expr
ASSIGN_DIV  =>  idAfterAfterRule ::= assign_expr
ASSIGN_MOD  =>  idAfterAfterRule ::= assign_expr
EQUALS  =>  idAfterAfterRule ::= expr_binMaybe
DIFF  =>  idAfterAfterRule ::= expr_binMaybe
LEQ  =>  idAfterAfterRule ::= expr_binMaybe
GEQ  =>  idAfterAfterRule ::= expr_binMaybe
GT  =>  idAfterAfterRule ::= expr_binMaybe
LT  =>  idAfterAfterRule ::= expr_binMaybe
AND  =>  idAfterAfterRule ::= expr_binMaybe
OR  =>  idAfterAfterRule ::= expr_binMaybe
DECREMENT  =>  idAfterAfterRule ::= assign_expr
INCREMENT  =>  idAfterAfterRule ::= assign_expr
RIGHT_BRACKET  =>  idAfterAfterRule ::= expr_binMaybe
================================
19 cmd_decl_var
CONST  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
INT  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
REAL  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
CHAR  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
BOOL  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
STR  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
VOID  =>  cmd_decl_var ::= all_decl_var assign_expr_maybe
================================
20 assign_expr_maybe
ASSIGN  =>  assign_expr_maybe ::= assign_expr
RIGHT_PAREN  =>  assign_expr_maybe ::= Îµ
SEMICOLON  =>  assign_expr_maybe ::= Îµ
ASSIGN_PLUS  =>  assign_expr_maybe ::= assign_expr
ASSIGN_MINUS  =>  assign_expr_maybe ::= assign_expr
ASSIGN_MULT  =>  assign_expr_maybe ::= assign_expr
ASSIGN_DIV  =>  assign_expr_maybe ::= assign_expr
ASSIGN_MOD  =>  assign_expr_maybe ::= assign_expr
DECREMENT  =>  assign_expr_maybe ::= assign_expr
INCREMENT  =>  assign_expr_maybe ::= assign_expr
RIGHT_BRACKET  =>  assign_expr_maybe ::= Îµ
================================
21 cmd_loop
FOR  =>  cmd_loop ::= for
LOOP  =>  cmd_loop ::= loop
================================
22 cmd_cond
IF  =>  cmd_cond ::= if
================================
23 cmd_switch
SWITCH  =>  cmd_switch ::= switch
================================
24 for
FOR  =>  for ::= FOR LEFT_PAREN for_stmt SEMICOLON for_stmt SEMICOLON for_stmt RIGHT_PAREN cmd
================================
25 for_stmt
ID  =>  for_stmt ::= idAfterRule
CONST  =>  for_stmt ::= all_decl_var assign_expr
RIGHT_PAREN  =>  for_stmt ::= Îµ
SEMICOLON  =>  for_stmt ::= Îµ
DECREMENT  =>  for_stmt ::= idAfterRule
INCREMENT  =>  for_stmt ::= idAfterRule
INT  =>  for_stmt ::= all_decl_var assign_expr
REAL  =>  for_stmt ::= all_decl_var assign_expr
CHAR  =>  for_stmt ::= all_decl_var assign_expr
BOOL  =>  for_stmt ::= all_decl_var assign_expr
STR  =>  for_stmt ::= all_decl_var assign_expr
VOID  =>  for_stmt ::= all_decl_var assign_expr
================================
26 loop
LOOP  =>  loop ::= LOOP cmd
================================
27 if
IF  =>  if ::= IF LEFT_PAREN expr RIGHT_PAREN cmd ENDIF else
================================
28 else
$  =>  else ::= Îµ
ID  =>  else ::= Îµ
CONST  =>  else ::= Îµ
FUNCTION  =>  else ::= Îµ
LEFT_PAREN  =>  else ::= Îµ
STRUCT  =>  else ::= Îµ
SEMICOLON  =>  else ::= Îµ
LEFT_BRACE  =>  else ::= Îµ
RIGHT_BRACE  =>  else ::= Îµ
RETURN  =>  else ::= Îµ
BREAK  =>  else ::= Îµ
CONTINUE  =>  else ::= Îµ
EXIT  =>  else ::= Îµ
FOR  =>  else ::= Îµ
LOOP  =>  else ::= Îµ
IF  =>  else ::= Îµ
ENDIF  =>  else ::= Îµ
ELSE  =>  else ::= ELSE cmd
SWITCH  =>  else ::= Îµ
CASE  =>  else ::= Îµ
TERNARY  =>  else ::= Îµ
NOT  =>  else ::= Îµ
DECREMENT  =>  else ::= Îµ
INCREMENT  =>  else ::= Îµ
READ  =>  else ::= Îµ
WRITE  =>  else ::= Îµ
INT  =>  else ::= Îµ
REAL  =>  else ::= Îµ
CHAR  =>  else ::= Îµ
BOOL  =>  else ::= Îµ
STR  =>  else ::= Îµ
VOID  =>  else ::= Îµ
NUMBER  =>  else ::= Îµ
CHARACTER  =>  else ::= Îµ
TRUE  =>  else ::= Îµ
FALSE  =>  else ::= Îµ
STRING  =>  else ::= Îµ
================================
29 switch
SWITCH  =>  switch ::= SWITCH LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE casezeromais RIGHT_BRACE
================================
30 casezeromais
RIGHT_BRACE  =>  casezeromais ::= Îµ
CASE  =>  casezeromais ::= case casezeromais
================================
31 case
CASE  =>  case ::= CASE literal COLON stmts
================================
32 funCall
LEFT_PAREN  =>  funCall ::= LEFT_PAREN lpar RIGHT_PAREN
================================
33 lpar
ID  =>  lpar ::= expr lparAfter
LEFT_PAREN  =>  lpar ::= expr lparAfter
RIGHT_PAREN  =>  lpar ::= expr lparAfter
COMMA  =>  lpar ::= expr lparAfter
TERNARY  =>  lpar ::= expr lparAfter
NOT  =>  lpar ::= expr lparAfter
NUMBER  =>  lpar ::= expr lparAfter
CHARACTER  =>  lpar ::= expr lparAfter
TRUE  =>  lpar ::= expr lparAfter
FALSE  =>  lpar ::= expr lparAfter
STRING  =>  lpar ::= expr lparAfter
================================
34 lparAfter
RIGHT_PAREN  =>  lparAfter ::= Îµ
COMMA  =>  lparAfter ::= COMMA expr lparAfter
================================
35 expr_tern
TERNARY  =>  expr_tern ::= TERNARY expr QUESTION_MARK expr COLON expr
================================
36 op_un
NOT  =>  op_un ::= NOT
================================
37 op_bin
MINUS  =>  op_bin ::= op_math
PLUS  =>  op_bin ::= op_math
DIV  =>  op_bin ::= op_math
TIMES  =>  op_bin ::= op_math
MOD  =>  op_bin ::= op_math
EQUALS  =>  op_bin ::= op_logic
DIFF  =>  op_bin ::= op_logic
LEQ  =>  op_bin ::= op_logic
GEQ  =>  op_bin ::= op_logic
GT  =>  op_bin ::= op_logic
LT  =>  op_bin ::= op_logic
AND  =>  op_bin ::= op_logic
OR  =>  op_bin ::= op_logic
================================
38 op_math
MINUS  =>  op_math ::= MINUS
PLUS  =>  op_math ::= PLUS
DIV  =>  op_math ::= DIV
TIMES  =>  op_math ::= TIMES
MOD  =>  op_math ::= MOD
================================
39 assign_extra
ASSIGN_PLUS  =>  assign_extra ::= ASSIGN_PLUS
ASSIGN_MINUS  =>  assign_extra ::= ASSIGN_MINUS
ASSIGN_MULT  =>  assign_extra ::= ASSIGN_MULT
ASSIGN_DIV  =>  assign_extra ::= ASSIGN_DIV
ASSIGN_MOD  =>  assign_extra ::= ASSIGN_MOD
================================
40 op_logic
EQUALS  =>  op_logic ::= EQUALS
DIFF  =>  op_logic ::= DIFF
LEQ  =>  op_logic ::= LEQ
GEQ  =>  op_logic ::= GEQ
GT  =>  op_logic ::= GT
LT  =>  op_logic ::= LT
AND  =>  op_logic ::= AND
OR  =>  op_logic ::= OR
================================
41 inc
DECREMENT  =>  inc ::= DECREMENT
INCREMENT  =>  inc ::= INCREMENT
================================
42 inOut
READ  =>  inOut ::= in
WRITE  =>  inOut ::= out
================================
43 in
READ  =>  in ::= READ LEFT_PAREN ID RIGHT_PAREN
================================
44 out
WRITE  =>  out ::= WRITE LEFT_PAREN ID RIGHT_PAREN
================================
45 type
ID  =>  type ::= typename hashtagzeromais cochetezeromais
INT  =>  type ::= typename hashtagzeromais cochetezeromais
REAL  =>  type ::= typename hashtagzeromais cochetezeromais
CHAR  =>  type ::= typename hashtagzeromais cochetezeromais
BOOL  =>  type ::= typename hashtagzeromais cochetezeromais
STR  =>  type ::= typename hashtagzeromais cochetezeromais
VOID  =>  type ::= typename hashtagzeromais cochetezeromais
================================
46 typename
ID  =>  typename ::= ID
INT  =>  typename ::= primitivos
REAL  =>  typename ::= primitivos
CHAR  =>  typename ::= primitivos
BOOL  =>  typename ::= primitivos
STR  =>  typename ::= primitivos
VOID  =>  typename ::= primitivos
================================
47 primitivos
INT  =>  primitivos ::= INT
REAL  =>  primitivos ::= REAL
CHAR  =>  primitivos ::= CHAR
BOOL  =>  primitivos ::= BOOL
STR  =>  primitivos ::= STR
VOID  =>  primitivos ::= VOID
================================
48 hashtagzeromais
ID  =>  hashtagzeromais ::= Îµ
ASSIGN  =>  hashtagzeromais ::= Îµ
RIGHT_PAREN  =>  hashtagzeromais ::= Îµ
SEMICOLON  =>  hashtagzeromais ::= Îµ
REFERENCE  =>  hashtagzeromais ::= Îµ
ASSIGN_PLUS  =>  hashtagzeromais ::= Îµ
ASSIGN_MINUS  =>  hashtagzeromais ::= Îµ
ASSIGN_MULT  =>  hashtagzeromais ::= Îµ
ASSIGN_DIV  =>  hashtagzeromais ::= Îµ
ASSIGN_MOD  =>  hashtagzeromais ::= Îµ
DECREMENT  =>  hashtagzeromais ::= Îµ
INCREMENT  =>  hashtagzeromais ::= Îµ
POINTER_VAL  =>  hashtagzeromais ::= POINTER_VAL hashtagzeromais
LEFT_BRACKET  =>  hashtagzeromais ::= Îµ
RIGHT_BRACKET  =>  hashtagzeromais ::= Îµ
================================
49 literal
NUMBER  =>  literal ::= NUMBER
CHARACTER  =>  literal ::= CHARACTER
TRUE  =>  literal ::= TRUE
FALSE  =>  literal ::= FALSE
STRING  =>  literal ::= STRING
================================
50 array_access
LEFT_BRACKET  =>  array_access ::= LEFT_BRACKET inside_cochete RIGHT_BRACKET cochetezeromais
================================
51 cochetezeromais
ID  =>  cochetezeromais ::= Îµ
ASSIGN  =>  cochetezeromais ::= Îµ
RIGHT_PAREN  =>  cochetezeromais ::= Îµ
SEMICOLON  =>  cochetezeromais ::= Îµ
COMMA  =>  cochetezeromais ::= Îµ
REFERENCE  =>  cochetezeromais ::= Îµ
COLON  =>  cochetezeromais ::= Îµ
QUESTION_MARK  =>  cochetezeromais ::= Îµ
MINUS  =>  cochetezeromais ::= Îµ
PLUS  =>  cochetezeromais ::= Îµ
DIV  =>  cochetezeromais ::= Îµ
TIMES  =>  cochetezeromais ::= Îµ
MOD  =>  cochetezeromais ::= Îµ
ASSIGN_PLUS  =>  cochetezeromais ::= Îµ
ASSIGN_MINUS  =>  cochetezeromais ::= Îµ
ASSIGN_MULT  =>  cochetezeromais ::= Îµ
ASSIGN_DIV  =>  cochetezeromais ::= Îµ
ASSIGN_MOD  =>  cochetezeromais ::= Îµ
EQUALS  =>  cochetezeromais ::= Îµ
DIFF  =>  cochetezeromais ::= Îµ
LEQ  =>  cochetezeromais ::= Îµ
GEQ  =>  cochetezeromais ::= Îµ
GT  =>  cochetezeromais ::= Îµ
LT  =>  cochetezeromais ::= Îµ
AND  =>  cochetezeromais ::= Îµ
OR  =>  cochetezeromais ::= Îµ
DECREMENT  =>  cochetezeromais ::= Îµ
INCREMENT  =>  cochetezeromais ::= Îµ
LEFT_BRACKET  =>  cochetezeromais ::= LEFT_BRACKET inside_cochete RIGHT_BRACKET cochetezeromais
RIGHT_BRACKET  =>  cochetezeromais ::= Îµ
================================
52 inside_cochete
ID  =>  inside_cochete ::= idAfterRule
LEFT_PAREN  =>  inside_cochete ::= expr_without_term
TERNARY  =>  inside_cochete ::= expr_without_term
NOT  =>  inside_cochete ::= expr_without_term
DECREMENT  =>  inside_cochete ::= idAfterRule
INCREMENT  =>  inside_cochete ::= idAfterRule
NUMBER  =>  inside_cochete ::= expr_without_term
CHARACTER  =>  inside_cochete ::= expr_without_term
TRUE  =>  inside_cochete ::= expr_without_term
FALSE  =>  inside_cochete ::= expr_without_term
STRING  =>  inside_cochete ::= expr_without_term
RIGHT_BRACKET  =>  inside_cochete ::= expr_without_term
================================
53 termAfter
ID  =>  termAfter ::= ponteirozeromais
ASSIGN  =>  termAfter ::= ponteirozeromais
LEFT_PAREN  =>  termAfter ::= funCall
RIGHT_PAREN  =>  termAfter ::= ponteirozeromais
SEMICOLON  =>  termAfter ::= ponteirozeromais
COMMA  =>  termAfter ::= ponteirozeromais
COLON  =>  termAfter ::= ponteirozeromais
QUESTION_MARK  =>  termAfter ::= ponteirozeromais
MINUS  =>  termAfter ::= ponteirozeromais
PLUS  =>  termAfter ::= ponteirozeromais
DIV  =>  termAfter ::= ponteirozeromais
TIMES  =>  termAfter ::= ponteirozeromais
MOD  =>  termAfter ::= ponteirozeromais
ASSIGN_PLUS  =>  termAfter ::= ponteirozeromais
ASSIGN_MINUS  =>  termAfter ::= ponteirozeromais
ASSIGN_MULT  =>  termAfter ::= ponteirozeromais
ASSIGN_DIV  =>  termAfter ::= ponteirozeromais
ASSIGN_MOD  =>  termAfter ::= ponteirozeromais
EQUALS  =>  termAfter ::= ponteirozeromais
DIFF  =>  termAfter ::= ponteirozeromais
LEQ  =>  termAfter ::= ponteirozeromais
GEQ  =>  termAfter ::= ponteirozeromais
GT  =>  termAfter ::= ponteirozeromais
LT  =>  termAfter ::= ponteirozeromais
AND  =>  termAfter ::= ponteirozeromais
OR  =>  termAfter ::= ponteirozeromais
DECREMENT  =>  termAfter ::= ponteirozeromais
INCREMENT  =>  termAfter ::= ponteirozeromais
LEFT_BRACKET  =>  termAfter ::= array_access
RIGHT_BRACKET  =>  termAfter ::= ponteirozeromais
ARROW  =>  termAfter ::= ponteirozeromais
================================
54 ponteirozeromais
ID  =>  ponteirozeromais ::= Îµ
ASSIGN  =>  ponteirozeromais ::= Îµ
RIGHT_PAREN  =>  ponteirozeromais ::= Îµ
SEMICOLON  =>  ponteirozeromais ::= Îµ
COMMA  =>  ponteirozeromais ::= Îµ
COLON  =>  ponteirozeromais ::= Îµ
QUESTION_MARK  =>  ponteirozeromais ::= Îµ
MINUS  =>  ponteirozeromais ::= Îµ
PLUS  =>  ponteirozeromais ::= Îµ
DIV  =>  ponteirozeromais ::= Îµ
TIMES  =>  ponteirozeromais ::= Îµ
MOD  =>  ponteirozeromais ::= Îµ
ASSIGN_PLUS  =>  ponteirozeromais ::= Îµ
ASSIGN_MINUS  =>  ponteirozeromais ::= Îµ
ASSIGN_MULT  =>  ponteirozeromais ::= Îµ
ASSIGN_DIV  =>  ponteirozeromais ::= Îµ
ASSIGN_MOD  =>  ponteirozeromais ::= Îµ
EQUALS  =>  ponteirozeromais ::= Îµ
DIFF  =>  ponteirozeromais ::= Îµ
LEQ  =>  ponteirozeromais ::= Îµ
GEQ  =>  ponteirozeromais ::= Îµ
GT  =>  ponteirozeromais ::= Îµ
LT  =>  ponteirozeromais ::= Îµ
AND  =>  ponteirozeromais ::= Îµ
OR  =>  ponteirozeromais ::= Îµ
DECREMENT  =>  ponteirozeromais ::= Îµ
INCREMENT  =>  ponteirozeromais ::= Îµ
RIGHT_BRACKET  =>  ponteirozeromais ::= Îµ
ARROW  =>  ponteirozeromais ::= ARROW ID ponteirozeromais
================================
55 expr
ID  =>  expr ::= ID termAfter expr_binMaybe
LEFT_PAREN  =>  expr ::= LEFT_PAREN expr RIGHT_PAREN
RIGHT_PAREN  =>  expr ::= Îµ
SEMICOLON  =>  expr ::= Îµ
COMMA  =>  expr ::= Îµ
COLON  =>  expr ::= Îµ
TERNARY  =>  expr ::= expr_tern
QUESTION_MARK  =>  expr ::= Îµ
NOT  =>  expr ::= op_un expr
NUMBER  =>  expr ::= literal expr_binMaybe
CHARACTER  =>  expr ::= literal expr_binMaybe
TRUE  =>  expr ::= literal expr_binMaybe
FALSE  =>  expr ::= literal expr_binMaybe
STRING  =>  expr ::= literal expr_binMaybe
RIGHT_BRACKET  =>  expr ::= Îµ
================================
56 expr_without_term
LEFT_PAREN  =>  expr_without_term ::= LEFT_PAREN expr RIGHT_PAREN
SEMICOLON  =>  expr_without_term ::= Îµ
TERNARY  =>  expr_without_term ::= expr_tern
NOT  =>  expr_without_term ::= op_un expr
NUMBER  =>  expr_without_term ::= literal
CHARACTER  =>  expr_without_term ::= literal
TRUE  =>  expr_without_term ::= literal
FALSE  =>  expr_without_term ::= literal
STRING  =>  expr_without_term ::= literal
RIGHT_BRACKET  =>  expr_without_term ::= Îµ
================================
57 expr_binMaybe
RIGHT_PAREN  =>  expr_binMaybe ::= Îµ
SEMICOLON  =>  expr_binMaybe ::= Îµ
COMMA  =>  expr_binMaybe ::= Îµ
COLON  =>  expr_binMaybe ::= Îµ
QUESTION_MARK  =>  expr_binMaybe ::= Îµ
MINUS  =>  expr_binMaybe ::= op_bin expr
PLUS  =>  expr_binMaybe ::= op_bin expr
DIV  =>  expr_binMaybe ::= op_bin expr
TIMES  =>  expr_binMaybe ::= op_bin expr
MOD  =>  expr_binMaybe ::= op_bin expr
EQUALS  =>  expr_binMaybe ::= op_bin expr
DIFF  =>  expr_binMaybe ::= op_bin expr
LEQ  =>  expr_binMaybe ::= op_bin expr
GEQ  =>  expr_binMaybe ::= op_bin expr
GT  =>  expr_binMaybe ::= op_bin expr
LT  =>  expr_binMaybe ::= op_bin expr
AND  =>  expr_binMaybe ::= op_bin expr
OR  =>  expr_binMaybe ::= op_bin expr
RIGHT_BRACKET  =>  expr_binMaybe ::= Îµ
================================

Terminals unused in grammar

    IF
    ENDIF
    ELSE
    SWITCH
    CASE
    FOR
    LOOP
    RETURN
    STRUCT
    CONST
    BREAK
    CONTINUE
    READ
    WRITE
    EXIT
    WHEN
    PLUS
    MINUS
    TIMES
    DIV
    MOD
    LEFT_BRACKET
    RIGHT_BRACKET
    SEMICOLON
    QUESTION_MARK
    COLON
    DOT
    POINTER_VAL
    TERNARY
    ASSIGN_PLUS
    ASSIGN_MINUS
    ASSIGN_MULT
    ASSIGN_DIV
    ASSIGN_MOD
    ASSIGN


State 16 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: stmts

    2 stmts: %empty
    3      | stmt stmts

    4 stmt: decl_fun
    5     | expr

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN block

    7 type: typename

    8 typename: primitivos
    9         | ID

   10 primitivos: INT
   11           | REAL
   12           | CHAR
   13           | BOOL
   14           | STR
   15           | VOID

   16 typedlpar: %empty
   17          | parameter typedlparAfter

   18 typedlparAfter: %empty
   19               | COMMA parameter typedlparAfter

   20 parameter: type parameterAfter

   21 parameterAfter: ID
   22               | REFERENCE ID

   23 block: LEFT_BRACE stmts RIGHT_BRACE

   24 expr: INCREMENT expr
   25     | DECREMENT expr
   26     | '-' expr
   27     | NOT expr
   28     | expr AND expr
   29     | expr OR expr
   30     | expr '+' expr
   31     | expr '*' expr
   32     | expr '/' expr
   33     | expr '-' expr
   34     | expr '%' expr
   35     | expr EQUALS expr
   36     | expr DIFF expr
   37     | expr LT expr
   38     | expr GT expr
   39     | expr LEQ expr
   40     | expr GEQ expr
   41     | NUMBER
   42     | identifier
   43     | TRUE
   44     | FALSE
   45     | CHARACTER
   46     | STRING

   47 identifier: ID
   48           | ID arrayAccess
   49           | ID funcall
   50           | ID pointerAccess

   51 arrayAccess: '[' expr ']'
   52            | '[' expr ']' arrayAccess

   53 funcall: LEFT_PAREN lpar RIGHT_PAREN

   54 lpar: %empty
   55     | expr lparAfter

   56 lparAfter: %empty
   57          | COMMA expr lparAfter

   58 pointerAccess: ARROW ID
   59              | ARROW ID pointerAccess


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 34
    '*' (42) 31
    '+' (43) 30
    '-' (45) 26 33
    '/' (47) 32
    '[' (91) 51 52
    ']' (93) 51 52
    error (256)
    IF (258)
    ENDIF (259)
    ELSE (260)
    SWITCH (261)
    CASE (262)
    FOR (263)
    LOOP (264)
    RETURN (265)
    STRUCT (266)
    CONST (267)
    BREAK (268)
    CONTINUE (269)
    READ (270)
    WRITE (271)
    EXIT (272)
    WHEN (273)
    FUNCTION (274) 6
    INT (275) 10
    REAL (276) 11
    CHAR (277) 12
    STR (278) 14
    BOOL (279) 13
    VOID (280) 15
    PLUS (281)
    MINUS (282)
    TIMES (283)
    DIV (284)
    MOD (285)
    TRUE (286) 43
    FALSE (287) 44
    NUMBER (288) 41
    CHARACTER (289) 45
    STRING (290) 46
    LEFT_BRACE (291) 23
    RIGHT_BRACE (292) 23
    LEFT_BRACKET (293)
    RIGHT_BRACKET (294)
    ID (295) 6 9 21 22 47 48 49 50 58 59
    SEMICOLON (296)
    QUESTION_MARK (297)
    COLON (298)
    DOT (299)
    POINTER_VAL (300)
    ARROW (301) 58 59
    COMMA (302) 19 57
    REFERENCE (303) 22
    TERNARY (304)
    ASSIGN_PLUS (305)
    ASSIGN_MINUS (306)
    ASSIGN_MULT (307)
    ASSIGN_DIV (308)
    ASSIGN_MOD (309)
    ASSIGN (310)
    LEFT_PAREN (311) 6 53
    RIGHT_PAREN (312) 6 53
    INCREMENT (313) 24
    DECREMENT (314) 25
    NOT (315) 27
    OR (316) 29
    AND (317) 28
    EQUALS (318) 35
    DIFF (319) 36
    LT (320) 37
    GT (321) 38
    LEQ (322) 39
    GEQ (323) 40


Nonterminals, with rules where they appear

    $accept (76)
        on left: 0
    prog (77)
        on left: 1
        on right: 0
    stmts (78)
        on left: 2 3
        on right: 1 3 23
    stmt (79)
        on left: 4 5
        on right: 3
    decl_fun (80)
        on left: 6
        on right: 4
    type (81)
        on left: 7
        on right: 6 20
    typename (82)
        on left: 8 9
        on right: 7
    primitivos (83)
        on left: 10 11 12 13 14 15
        on right: 8
    typedlpar (84)
        on left: 16 17
        on right: 6
    typedlparAfter (85)
        on left: 18 19
        on right: 17 19
    parameter (86)
        on left: 20
        on right: 17 19
    parameterAfter (87)
        on left: 21 22
        on right: 20
    block (88)
        on left: 23
        on right: 6
    expr (89)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
        on right: 5 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 51 52 55 57
    identifier (90)
        on left: 47 48 49 50
        on right: 42
    arrayAccess (91)
        on left: 51 52
        on right: 48 52
    funcall (92)
        on left: 53
        on right: 49
    lpar (93)
        on left: 54 55
        on right: 53
    lparAfter (94)
        on left: 56 57
        on right: 55 57
    pointerAccess (95)
        on left: 58 59
        on right: 50 59


State 0

    0 $accept: . prog $end

    FUNCTION   shift, and go to state 1
    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    $default  reduce using rule 2 (stmts)

    prog        go to state 12
    stmts       go to state 13
    stmt        go to state 14
    decl_fun    go to state 15
    expr        go to state 16
    identifier  go to state 17


State 1

    6 decl_fun: FUNCTION . type ID LEFT_PAREN typedlpar RIGHT_PAREN block

    INT   shift, and go to state 18
    REAL  shift, and go to state 19
    CHAR  shift, and go to state 20
    STR   shift, and go to state 21
    BOOL  shift, and go to state 22
    VOID  shift, and go to state 23
    ID    shift, and go to state 24

    type        go to state 25
    typename    go to state 26
    primitivos  go to state 27


State 2

   43 expr: TRUE .

    $default  reduce using rule 43 (expr)


State 3

   44 expr: FALSE .

    $default  reduce using rule 44 (expr)


State 4

   41 expr: NUMBER .

    $default  reduce using rule 41 (expr)


State 5

   45 expr: CHARACTER .

    $default  reduce using rule 45 (expr)


State 6

   46 expr: STRING .

    $default  reduce using rule 46 (expr)


State 7

   47 identifier: ID .
   48           | ID . arrayAccess
   49           | ID . funcall
   50           | ID . pointerAccess

    '['         shift, and go to state 28
    ARROW       shift, and go to state 29
    LEFT_PAREN  shift, and go to state 30

    $default  reduce using rule 47 (identifier)

    arrayAccess    go to state 31
    funcall        go to state 32
    pointerAccess  go to state 33


State 8

   24 expr: INCREMENT . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 34
    identifier  go to state 17


State 9

   25 expr: DECREMENT . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 35
    identifier  go to state 17


State 10

   27 expr: NOT . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 36
    identifier  go to state 17


State 11

   26 expr: '-' . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 37
    identifier  go to state 17


State 12

    0 $accept: prog . $end

    $end  shift, and go to state 38


State 13

    1 prog: stmts .

    $default  reduce using rule 1 (prog)


State 14

    3 stmts: stmt . stmts

    FUNCTION   shift, and go to state 1
    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    $default  reduce using rule 2 (stmts)

    stmts       go to state 39
    stmt        go to state 14
    decl_fun    go to state 15
    expr        go to state 16
    identifier  go to state 17


State 15

    4 stmt: decl_fun .

    $default  reduce using rule 4 (stmt)


State 16

    5 stmt: expr .
   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    '-'       [reduce using rule 5 (stmt)]
    $default  reduce using rule 5 (stmt)


State 17

   42 expr: identifier .

    $default  reduce using rule 42 (expr)


State 18

   10 primitivos: INT .

    $default  reduce using rule 10 (primitivos)


State 19

   11 primitivos: REAL .

    $default  reduce using rule 11 (primitivos)


State 20

   12 primitivos: CHAR .

    $default  reduce using rule 12 (primitivos)


State 21

   14 primitivos: STR .

    $default  reduce using rule 14 (primitivos)


State 22

   13 primitivos: BOOL .

    $default  reduce using rule 13 (primitivos)


State 23

   15 primitivos: VOID .

    $default  reduce using rule 15 (primitivos)


State 24

    9 typename: ID .

    $default  reduce using rule 9 (typename)


State 25

    6 decl_fun: FUNCTION type . ID LEFT_PAREN typedlpar RIGHT_PAREN block

    ID  shift, and go to state 53


State 26

    7 type: typename .

    $default  reduce using rule 7 (type)


State 27

    8 typename: primitivos .

    $default  reduce using rule 8 (typename)


State 28

   51 arrayAccess: '[' . expr ']'
   52            | '[' . expr ']' arrayAccess

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 54
    identifier  go to state 17


State 29

   58 pointerAccess: ARROW . ID
   59              | ARROW . ID pointerAccess

    ID  shift, and go to state 55


State 30

   53 funcall: LEFT_PAREN . lpar RIGHT_PAREN

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    $default  reduce using rule 54 (lpar)

    expr        go to state 56
    identifier  go to state 17
    lpar        go to state 57


State 31

   48 identifier: ID arrayAccess .

    $default  reduce using rule 48 (identifier)


State 32

   49 identifier: ID funcall .

    $default  reduce using rule 49 (identifier)


State 33

   50 identifier: ID pointerAccess .

    $default  reduce using rule 50 (identifier)


State 34

   24 expr: INCREMENT expr .
   28     | expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 24 (expr)


State 35

   25 expr: DECREMENT expr .
   28     | expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 25 (expr)


State 36

   27 expr: NOT expr .
   28     | expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 27 (expr)


State 37

   26 expr: '-' expr .
   28     | expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 26 (expr)


State 38

    0 $accept: prog $end .

    $default  accept


State 39

    3 stmts: stmt stmts .

    $default  reduce using rule 3 (stmts)


State 40

   29 expr: expr OR . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 58
    identifier  go to state 17


State 41

   28 expr: expr AND . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 59
    identifier  go to state 17


State 42

   30 expr: expr '+' . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 60
    identifier  go to state 17


State 43

   33 expr: expr '-' . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 61
    identifier  go to state 17


State 44

   31 expr: expr '*' . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 62
    identifier  go to state 17


State 45

   32 expr: expr '/' . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 63
    identifier  go to state 17


State 46

   34 expr: expr '%' . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 64
    identifier  go to state 17


State 47

   35 expr: expr EQUALS . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 65
    identifier  go to state 17


State 48

   36 expr: expr DIFF . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 66
    identifier  go to state 17


State 49

   37 expr: expr LT . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 67
    identifier  go to state 17


State 50

   38 expr: expr GT . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 68
    identifier  go to state 17


State 51

   39 expr: expr LEQ . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 69
    identifier  go to state 17


State 52

   40 expr: expr GEQ . expr

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 70
    identifier  go to state 17


State 53

    6 decl_fun: FUNCTION type ID . LEFT_PAREN typedlpar RIGHT_PAREN block

    LEFT_PAREN  shift, and go to state 71


State 54

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr
   51 arrayAccess: '[' expr . ']'
   52            | '[' expr . ']' arrayAccess

    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52
    ']'     shift, and go to state 72


State 55

   58 pointerAccess: ARROW ID .
   59              | ARROW ID . pointerAccess

    ARROW  shift, and go to state 29

    $default  reduce using rule 58 (pointerAccess)

    pointerAccess  go to state 73


State 56

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr
   55 lpar: expr . lparAfter

    COMMA   shift, and go to state 74
    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 56 (lparAfter)

    lparAfter  go to state 75


State 57

   53 funcall: LEFT_PAREN lpar . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 76


State 58

   28 expr: expr . AND expr
   29     | expr . OR expr
   29     | expr OR expr .
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 29 (expr)


State 59

   28 expr: expr . AND expr
   28     | expr AND expr .
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 28 (expr)


State 60

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   30     | expr '+' expr .
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 30 (expr)


State 61

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   33     | expr '-' expr .
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 33 (expr)


State 62

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   31     | expr '*' expr .
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 31 (expr)


State 63

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   32     | expr '/' expr .
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 32 (expr)


State 64

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   34     | expr '%' expr .
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 34 (expr)


State 65

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   35     | expr EQUALS expr .
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 35 (expr)


State 66

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   36     | expr DIFF expr .
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 36 (expr)


State 67

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   37     | expr LT expr .
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 37 (expr)


State 68

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   38     | expr GT expr .
   39     | expr . LEQ expr
   40     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 38 (expr)


State 69

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   39     | expr LEQ expr .
   40     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 39 (expr)


State 70

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr
   40     | expr GEQ expr .

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 40 (expr)


State 71

    6 decl_fun: FUNCTION type ID LEFT_PAREN . typedlpar RIGHT_PAREN block

    INT   shift, and go to state 18
    REAL  shift, and go to state 19
    CHAR  shift, and go to state 20
    STR   shift, and go to state 21
    BOOL  shift, and go to state 22
    VOID  shift, and go to state 23
    ID    shift, and go to state 24

    $default  reduce using rule 16 (typedlpar)

    type        go to state 77
    typename    go to state 26
    primitivos  go to state 27
    typedlpar   go to state 78
    parameter   go to state 79


State 72

   51 arrayAccess: '[' expr ']' .
   52            | '[' expr ']' . arrayAccess

    '['  shift, and go to state 28

    $default  reduce using rule 51 (arrayAccess)

    arrayAccess  go to state 80


State 73

   59 pointerAccess: ARROW ID pointerAccess .

    $default  reduce using rule 59 (pointerAccess)


State 74

   57 lparAfter: COMMA . expr lparAfter

    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    expr        go to state 81
    identifier  go to state 17


State 75

   55 lpar: expr lparAfter .

    $default  reduce using rule 55 (lpar)


State 76

   53 funcall: LEFT_PAREN lpar RIGHT_PAREN .

    $default  reduce using rule 53 (funcall)


State 77

   20 parameter: type . parameterAfter

    ID         shift, and go to state 82
    REFERENCE  shift, and go to state 83

    parameterAfter  go to state 84


State 78

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar . RIGHT_PAREN block

    RIGHT_PAREN  shift, and go to state 85


State 79

   17 typedlpar: parameter . typedlparAfter

    COMMA  shift, and go to state 86

    $default  reduce using rule 18 (typedlparAfter)

    typedlparAfter  go to state 87


State 80

   52 arrayAccess: '[' expr ']' arrayAccess .

    $default  reduce using rule 52 (arrayAccess)


State 81

   28 expr: expr . AND expr
   29     | expr . OR expr
   30     | expr . '+' expr
   31     | expr . '*' expr
   32     | expr . '/' expr
   33     | expr . '-' expr
   34     | expr . '%' expr
   35     | expr . EQUALS expr
   36     | expr . DIFF expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . LEQ expr
   40     | expr . GEQ expr
   57 lparAfter: COMMA expr . lparAfter

    COMMA   shift, and go to state 74
    OR      shift, and go to state 40
    AND     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '*'     shift, and go to state 44
    '/'     shift, and go to state 45
    '%'     shift, and go to state 46
    EQUALS  shift, and go to state 47
    DIFF    shift, and go to state 48
    LT      shift, and go to state 49
    GT      shift, and go to state 50
    LEQ     shift, and go to state 51
    GEQ     shift, and go to state 52

    $default  reduce using rule 56 (lparAfter)

    lparAfter  go to state 88


State 82

   21 parameterAfter: ID .

    $default  reduce using rule 21 (parameterAfter)


State 83

   22 parameterAfter: REFERENCE . ID

    ID  shift, and go to state 89


State 84

   20 parameter: type parameterAfter .

    $default  reduce using rule 20 (parameter)


State 85

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN . block

    LEFT_BRACE  shift, and go to state 90

    block  go to state 91


State 86

   19 typedlparAfter: COMMA . parameter typedlparAfter

    INT   shift, and go to state 18
    REAL  shift, and go to state 19
    CHAR  shift, and go to state 20
    STR   shift, and go to state 21
    BOOL  shift, and go to state 22
    VOID  shift, and go to state 23
    ID    shift, and go to state 24

    type        go to state 77
    typename    go to state 26
    primitivos  go to state 27
    parameter   go to state 92


State 87

   17 typedlpar: parameter typedlparAfter .

    $default  reduce using rule 17 (typedlpar)


State 88

   57 lparAfter: COMMA expr lparAfter .

    $default  reduce using rule 57 (lparAfter)


State 89

   22 parameterAfter: REFERENCE ID .

    $default  reduce using rule 22 (parameterAfter)


State 90

   23 block: LEFT_BRACE . stmts RIGHT_BRACE

    FUNCTION   shift, and go to state 1
    TRUE       shift, and go to state 2
    FALSE      shift, and go to state 3
    NUMBER     shift, and go to state 4
    CHARACTER  shift, and go to state 5
    STRING     shift, and go to state 6
    ID         shift, and go to state 7
    INCREMENT  shift, and go to state 8
    DECREMENT  shift, and go to state 9
    NOT        shift, and go to state 10
    '-'        shift, and go to state 11

    $default  reduce using rule 2 (stmts)

    stmts       go to state 93
    stmt        go to state 14
    decl_fun    go to state 15
    expr        go to state 16
    identifier  go to state 17


State 91

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN block .

    $default  reduce using rule 6 (decl_fun)


State 92

   19 typedlparAfter: COMMA parameter . typedlparAfter

    COMMA  shift, and go to state 86

    $default  reduce using rule 18 (typedlparAfter)

    typedlparAfter  go to state 94


State 93

   23 block: LEFT_BRACE stmts . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 95


State 94

   19 typedlparAfter: COMMA parameter typedlparAfter .

    $default  reduce using rule 19 (typedlparAfter)


State 95

   23 block: LEFT_BRACE stmts RIGHT_BRACE .

    $default  reduce using rule 23 (block)

Terminals unused in grammar

    '['
    STRUCT
    DOT


Grammar

    0 $accept: prog $end

    1 prog: stmts

    2 stmts: %empty
    3      | stmt stmts

    4 stmt: decl_fun
    5     | cmd

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN block

    7 cmd: identifier assign_expr SEMICOLON
    8    | cmd_decl_var SEMICOLON
    9    | inOut SEMICOLON
   10    | cmd_loop
   11    | cmd_cond
   12    | cmd_switch
   13    | expr SEMICOLON
   14    | RETURN expr SEMICOLON
   15    | BREAK SEMICOLON
   16    | CONTINUE SEMICOLON
   17    | EXIT WHEN expr SEMICOLON
   18    | block

   19 cmd_decl_var: all_decl_var assign_expr_maybe

   20 assign_expr_maybe: %empty
   21                  | assign_expr

   22 all_decl_var: decl_var_prim
   23             | const_decl_var

   24 decl_var_prim: primitivos hashtagzeromais cochetezeromais ID

   25 const_decl_var: CONST decl_var_prim

   26 hashtagzeromais: %empty
   27                | POINTER_VAL hashtagzeromais

   28 cochetezeromais: %empty
   29                | LEFT_BRACKET expr RIGHT_BRACKET cochetezeromais

   30 assign_expr: ASSIGN expr
   31            | assign_extra expr
   32            | inc

   33 assign_extra: ASSIGN_PLUS
   34             | ASSIGN_MINUS
   35             | ASSIGN_MULT
   36             | ASSIGN_DIV
   37             | ASSIGN_MOD

   38 inc: DECREMENT
   39    | INCREMENT

   40 inOut: in
   41      | out

   42 in: READ LEFT_PAREN ID RIGHT_PAREN

   43 out: WRITE LEFT_PAREN ID RIGHT_PAREN

   44 cmd_loop: for
   45         | loop

   46 cmd_cond: if

   47 cmd_switch: switch

   48 for: FOR LEFT_PAREN expr SEMICOLON expr SEMICOLON expr RIGHT_PAREN cmd

   49 loop: LOOP cmd

   50 if: IF LEFT_PAREN expr RIGHT_PAREN cmd ENDIF else

   51 else: %empty
   52     | ELSE cmd

   53 switch: SWITCH LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE casezeromais RIGHT_BRACE

   54 casezeromais: %empty
   55             | case casezeromais

   56 case: CASE literal COLON stmts

   57 type: typename

   58 typename: primitivos
   59         | ID

   60 primitivos: INT
   61           | REAL
   62           | CHAR
   63           | BOOL
   64           | STR
   65           | VOID

   66 typedlpar: %empty
   67          | parameter typedlparAfter

   68 typedlparAfter: %empty
   69               | COMMA parameter typedlparAfter

   70 parameter: type parameterAfter

   71 parameterAfter: ID
   72               | REFERENCE ID

   73 block: LEFT_BRACE stmts RIGHT_BRACE

   74 expr: INCREMENT expr
   75     | DECREMENT expr
   76     | LEFT_PAREN expr RIGHT_PAREN
   77     | MINUS identifier
   78     | NOT expr
   79     | expr AND expr
   80     | expr OR expr
   81     | expr PLUS expr
   82     | expr TIMES expr
   83     | expr DIV expr
   84     | expr MINUS expr
   85     | expr MOD expr
   86     | expr EQUALS expr
   87     | expr DIFF expr
   88     | expr LT expr
   89     | expr GT expr
   90     | expr LEQ expr
   91     | expr GEQ expr
   92     | expr_tern
   93     | literal
   94     | identifier

   95 expr_tern: TERNARY expr QUESTION_MARK expr COLON expr TERNARY

   96 identifier: ID
   97           | ID arrayAccess
   98           | ID LEFT_PAREN lpar RIGHT_PAREN
   99           | ID pointerAccess

  100 arrayAccess: LEFT_BRACKET expr RIGHT_BRACKET
  101            | LEFT_BRACKET expr RIGHT_BRACKET arrayAccess

  102 lpar: %empty
  103     | expr lparAfter

  104 lparAfter: %empty
  105          | COMMA expr lparAfter

  106 pointerAccess: ARROW ID
  107              | ARROW ID pointerAccess

  108 literal: NUMBER
  109        | CHARACTER
  110        | TRUE
  111        | FALSE
  112        | STRING


Terminals, with rules where they appear

    $end (0) 0
    '@' (64)
    '[' (91)
    error (256)
    IF (258) 50
    ENDIF (259) 50
    ELSE (260) 52
    SWITCH (261) 53
    CASE (262) 56
    FOR (263) 48
    LOOP (264) 49
    RETURN (265) 14
    STRUCT (266)
    CONST (267) 25
    BREAK (268) 15
    CONTINUE (269) 16
    READ (270) 42
    WRITE (271) 43
    EXIT (272) 17
    WHEN (273) 17
    FUNCTION (274) 6
    INT (275) 60
    REAL (276) 61
    CHAR (277) 62
    STR (278) 64
    BOOL (279) 63
    VOID (280) 65
    PLUS (281) 81
    MINUS (282) 77 84
    TIMES (283) 82
    DIV (284) 83
    MOD (285) 85
    TRUE (286) 110
    FALSE (287) 111
    NUMBER (288) 108
    CHARACTER (289) 109
    STRING (290) 112
    LEFT_BRACE (291) 53 73
    RIGHT_BRACE (292) 53 73
    LEFT_BRACKET (293) 29 100 101
    RIGHT_BRACKET (294) 29 100 101
    SEMICOLON (295) 7 8 9 13 14 15 16 17 48
    QUESTION_MARK (296) 95
    COLON (297) 56 95
    DOT (298)
    POINTER_VAL (299) 27
    ARROW (300) 106 107
    COMMA (301) 69 105
    REFERENCE (302) 72
    TERNARY (303) 95
    ASSIGN_PLUS (304) 33
    ASSIGN_MINUS (305) 34
    ASSIGN_MULT (306) 35
    ASSIGN_DIV (307) 36
    ASSIGN_MOD (308) 37
    ASSIGN (309) 30
    ID <name> (310) 6 24 42 43 59 71 72 96 97 98 99 106 107
    LEFT_PAREN (311) 6 42 43 48 50 53 76 98
    RIGHT_PAREN (312) 6 42 43 48 50 53 76 98
    INCREMENT (313) 39 74
    DECREMENT (314) 38 75
    NOT (315) 78
    OR (316) 80
    AND (317) 79
    EQUALS (318) 86
    DIFF (319) 87
    LT (320) 88
    GT (321) 89
    LEQ (322) 90
    GEQ (323) 91


Nonterminals, with rules where they appear

    $accept (71)
        on left: 0
    prog (72)
        on left: 1
        on right: 0
    stmts (73)
        on left: 2 3
        on right: 1 3 56 73
    stmt (74)
        on left: 4 5
        on right: 3
    decl_fun (75)
        on left: 6
        on right: 4
    cmd <cmdRetorno> (76)
        on left: 7 8 9 10 11 12 13 14 15 16 17 18
        on right: 5 48 49 50 52
    cmd_decl_var <cmd_decl_varRetorno> (77)
        on left: 19
        on right: 8
    assign_expr_maybe <assign_expr_maybeRetorno> (78)
        on left: 20 21
        on right: 19
    all_decl_var <all_decl_varRetorno> (79)
        on left: 22 23
        on right: 19
    decl_var_prim <decl_var_primRetorno> (80)
        on left: 24
        on right: 22 25
    const_decl_var <const_decl_varRetorno> (81)
        on left: 25
        on right: 23
    hashtagzeromais <hashtagzeromaisRetorno> (82)
        on left: 26 27
        on right: 24 27
    cochetezeromais <cochetezeromaisRetorno> (83)
        on left: 28 29
        on right: 24 29
    assign_expr <assign_exprRetorno> (84)
        on left: 30 31 32
        on right: 7 21
    assign_extra (85)
        on left: 33 34 35 36 37
        on right: 31
    inc (86)
        on left: 38 39
        on right: 32
    inOut (87)
        on left: 40 41
        on right: 9
    in (88)
        on left: 42
        on right: 40
    out (89)
        on left: 43
        on right: 41
    cmd_loop (90)
        on left: 44 45
        on right: 10
    cmd_cond (91)
        on left: 46
        on right: 11
    cmd_switch (92)
        on left: 47
        on right: 12
    for (93)
        on left: 48
        on right: 44
    loop (94)
        on left: 49
        on right: 45
    if (95)
        on left: 50
        on right: 46
    else (96)
        on left: 51 52
        on right: 50
    switch (97)
        on left: 53
        on right: 47
    casezeromais (98)
        on left: 54 55
        on right: 53 55
    case (99)
        on left: 56
        on right: 55
    type (100)
        on left: 57
        on right: 6 70
    typename (101)
        on left: 58 59
        on right: 57
    primitivos <primitivosRetorno> (102)
        on left: 60 61 62 63 64 65
        on right: 24 58
    typedlpar (103)
        on left: 66 67
        on right: 6
    typedlparAfter (104)
        on left: 68 69
        on right: 67 69
    parameter (105)
        on left: 70
        on right: 67 69
    parameterAfter (106)
        on left: 71 72
        on right: 70
    block (107)
        on left: 73
        on right: 6 18
    expr <exprRetorno> (108)
        on left: 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94
        on right: 13 14 17 29 30 31 48 50 53 74 75 76 78 79 80 81 82 83 84 85 86 87 88 89 90 91 95 100 101 103 105
    expr_tern (109)
        on left: 95
        on right: 92
    identifier <identifierRetorno> (110)
        on left: 96 97 98 99
        on right: 7 77 94
    arrayAccess (111)
        on left: 100 101
        on right: 97 101
    lpar (112)
        on left: 102 103
        on right: 98
    lparAfter (113)
        on left: 104 105
        on right: 103 105
    pointerAccess (114)
        on left: 106 107
        on right: 99 107
    literal <literalRetorno> (115)
        on left: 108 109 110 111 112
        on right: 56 93


State 0

    0 $accept: . prog $end

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    FUNCTION    shift, and go to state 12
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    $default  reduce using rule 2 (stmts)

    prog            go to state 32
    stmts           go to state 33
    stmt            go to state 34
    decl_fun        go to state 35
    cmd             go to state 36
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 1

   50 if: IF . LEFT_PAREN expr RIGHT_PAREN cmd ENDIF else

    LEFT_PAREN  shift, and go to state 57


State 2

   53 switch: SWITCH . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE casezeromais RIGHT_BRACE

    LEFT_PAREN  shift, and go to state 58


State 3

   48 for: FOR . LEFT_PAREN expr SEMICOLON expr SEMICOLON expr RIGHT_PAREN cmd

    LEFT_PAREN  shift, and go to state 59


State 4

   49 loop: LOOP . cmd

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    cmd             go to state 60
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 5

   14 cmd: RETURN . expr SEMICOLON

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 61
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 6

   25 const_decl_var: CONST . decl_var_prim

    INT   shift, and go to state 13
    REAL  shift, and go to state 14
    CHAR  shift, and go to state 15
    STR   shift, and go to state 16
    BOOL  shift, and go to state 17
    VOID  shift, and go to state 18

    decl_var_prim  go to state 63
    primitivos     go to state 51


State 7

   15 cmd: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 64


State 8

   16 cmd: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 9

   42 in: READ . LEFT_PAREN ID RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 66


State 10

   43 out: WRITE . LEFT_PAREN ID RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 67


State 11

   17 cmd: EXIT . WHEN expr SEMICOLON

    WHEN  shift, and go to state 68


State 12

    6 decl_fun: FUNCTION . type ID LEFT_PAREN typedlpar RIGHT_PAREN block

    INT   shift, and go to state 13
    REAL  shift, and go to state 14
    CHAR  shift, and go to state 15
    STR   shift, and go to state 16
    BOOL  shift, and go to state 17
    VOID  shift, and go to state 18
    ID    shift, and go to state 69

    type        go to state 70
    typename    go to state 71
    primitivos  go to state 72


State 13

   60 primitivos: INT .

    $default  reduce using rule 60 (primitivos)


State 14

   61 primitivos: REAL .

    $default  reduce using rule 61 (primitivos)


State 15

   62 primitivos: CHAR .

    $default  reduce using rule 62 (primitivos)


State 16

   64 primitivos: STR .

    $default  reduce using rule 64 (primitivos)


State 17

   63 primitivos: BOOL .

    $default  reduce using rule 63 (primitivos)


State 18

   65 primitivos: VOID .

    $default  reduce using rule 65 (primitivos)


State 19

   77 expr: MINUS . identifier

    ID  shift, and go to state 27

    identifier  go to state 73


State 20

  110 literal: TRUE .

    $default  reduce using rule 110 (literal)


State 21

  111 literal: FALSE .

    $default  reduce using rule 111 (literal)


State 22

  108 literal: NUMBER .

    $default  reduce using rule 108 (literal)


State 23

  109 literal: CHARACTER .

    $default  reduce using rule 109 (literal)


State 24

  112 literal: STRING .

    $default  reduce using rule 112 (literal)


State 25

   73 block: LEFT_BRACE . stmts RIGHT_BRACE

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    FUNCTION    shift, and go to state 12
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    $default  reduce using rule 2 (stmts)

    stmts           go to state 74
    stmt            go to state 34
    decl_fun        go to state 35
    cmd             go to state 36
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 26

   95 expr_tern: TERNARY . expr QUESTION_MARK expr COLON expr TERNARY

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 75
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 27

   96 identifier: ID .
   97           | ID . arrayAccess
   98           | ID . LEFT_PAREN lpar RIGHT_PAREN
   99           | ID . pointerAccess

    LEFT_BRACKET  shift, and go to state 76
    ARROW         shift, and go to state 77
    LEFT_PAREN    shift, and go to state 78

    $default  reduce using rule 96 (identifier)

    arrayAccess    go to state 79
    pointerAccess  go to state 80


State 28

   76 expr: LEFT_PAREN . expr RIGHT_PAREN

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 81
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 29

   74 expr: INCREMENT . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 82
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 30

   75 expr: DECREMENT . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 83
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 31

   78 expr: NOT . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 84
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 32

    0 $accept: prog . $end

    $end  shift, and go to state 85


State 33

    1 prog: stmts .

    $default  reduce using rule 1 (prog)


State 34

    3 stmts: stmt . stmts

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    FUNCTION    shift, and go to state 12
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    $default  reduce using rule 2 (stmts)

    stmts           go to state 86
    stmt            go to state 34
    decl_fun        go to state 35
    cmd             go to state 36
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 35

    4 stmt: decl_fun .

    $default  reduce using rule 4 (stmt)


State 36

    5 stmt: cmd .

    $default  reduce using rule 5 (stmt)


State 37

    8 cmd: cmd_decl_var . SEMICOLON

    SEMICOLON  shift, and go to state 87


State 38

   19 cmd_decl_var: all_decl_var . assign_expr_maybe

    ASSIGN_PLUS   shift, and go to state 88
    ASSIGN_MINUS  shift, and go to state 89
    ASSIGN_MULT   shift, and go to state 90
    ASSIGN_DIV    shift, and go to state 91
    ASSIGN_MOD    shift, and go to state 92
    ASSIGN        shift, and go to state 93
    INCREMENT     shift, and go to state 94
    DECREMENT     shift, and go to state 95

    $default  reduce using rule 20 (assign_expr_maybe)

    assign_expr_maybe  go to state 96
    assign_expr        go to state 97
    assign_extra       go to state 98
    inc                go to state 99


State 39

   22 all_decl_var: decl_var_prim .

    $default  reduce using rule 22 (all_decl_var)


State 40

   23 all_decl_var: const_decl_var .

    $default  reduce using rule 23 (all_decl_var)


State 41

    9 cmd: inOut . SEMICOLON

    SEMICOLON  shift, and go to state 100


State 42

   40 inOut: in .

    $default  reduce using rule 40 (inOut)


State 43

   41 inOut: out .

    $default  reduce using rule 41 (inOut)


State 44

   10 cmd: cmd_loop .

    $default  reduce using rule 10 (cmd)


State 45

   11 cmd: cmd_cond .

    $default  reduce using rule 11 (cmd)


State 46

   12 cmd: cmd_switch .

    $default  reduce using rule 12 (cmd)


State 47

   44 cmd_loop: for .

    $default  reduce using rule 44 (cmd_loop)


State 48

   45 cmd_loop: loop .

    $default  reduce using rule 45 (cmd_loop)


State 49

   46 cmd_cond: if .

    $default  reduce using rule 46 (cmd_cond)


State 50

   47 cmd_switch: switch .

    $default  reduce using rule 47 (cmd_switch)


State 51

   24 decl_var_prim: primitivos . hashtagzeromais cochetezeromais ID

    POINTER_VAL  shift, and go to state 101

    $default  reduce using rule 26 (hashtagzeromais)

    hashtagzeromais  go to state 102


State 52

   18 cmd: block .

    $default  reduce using rule 18 (cmd)


State 53

   13 cmd: expr . SEMICOLON
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS       shift, and go to state 103
    MINUS      shift, and go to state 104
    TIMES      shift, and go to state 105
    DIV        shift, and go to state 106
    MOD        shift, and go to state 107
    SEMICOLON  shift, and go to state 108
    OR         shift, and go to state 109
    AND        shift, and go to state 110
    EQUALS     shift, and go to state 111
    DIFF       shift, and go to state 112
    LT         shift, and go to state 113
    GT         shift, and go to state 114
    LEQ        shift, and go to state 115
    GEQ        shift, and go to state 116


State 54

   92 expr: expr_tern .

    $default  reduce using rule 92 (expr)


State 55

    7 cmd: identifier . assign_expr SEMICOLON
   94 expr: identifier .

    ASSIGN_PLUS   shift, and go to state 88
    ASSIGN_MINUS  shift, and go to state 89
    ASSIGN_MULT   shift, and go to state 90
    ASSIGN_DIV    shift, and go to state 91
    ASSIGN_MOD    shift, and go to state 92
    ASSIGN        shift, and go to state 93
    INCREMENT     shift, and go to state 94
    DECREMENT     shift, and go to state 95

    $default  reduce using rule 94 (expr)

    assign_expr   go to state 117
    assign_extra  go to state 98
    inc           go to state 99


State 56

   93 expr: literal .

    $default  reduce using rule 93 (expr)


State 57

   50 if: IF LEFT_PAREN . expr RIGHT_PAREN cmd ENDIF else

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 118
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 58

   53 switch: SWITCH LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE casezeromais RIGHT_BRACE

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 119
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 59

   48 for: FOR LEFT_PAREN . expr SEMICOLON expr SEMICOLON expr RIGHT_PAREN cmd

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 120
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 60

   49 loop: LOOP cmd .

    $default  reduce using rule 49 (loop)


State 61

   14 cmd: RETURN expr . SEMICOLON
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS       shift, and go to state 103
    MINUS      shift, and go to state 104
    TIMES      shift, and go to state 105
    DIV        shift, and go to state 106
    MOD        shift, and go to state 107
    SEMICOLON  shift, and go to state 121
    OR         shift, and go to state 109
    AND        shift, and go to state 110
    EQUALS     shift, and go to state 111
    DIFF       shift, and go to state 112
    LT         shift, and go to state 113
    GT         shift, and go to state 114
    LEQ        shift, and go to state 115
    GEQ        shift, and go to state 116


State 62

   94 expr: identifier .

    $default  reduce using rule 94 (expr)


State 63

   25 const_decl_var: CONST decl_var_prim .

    $default  reduce using rule 25 (const_decl_var)


State 64

   15 cmd: BREAK SEMICOLON .

    $default  reduce using rule 15 (cmd)


State 65

   16 cmd: CONTINUE SEMICOLON .

    $default  reduce using rule 16 (cmd)


State 66

   42 in: READ LEFT_PAREN . ID RIGHT_PAREN

    ID  shift, and go to state 122


State 67

   43 out: WRITE LEFT_PAREN . ID RIGHT_PAREN

    ID  shift, and go to state 123


State 68

   17 cmd: EXIT WHEN . expr SEMICOLON

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 124
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 69

   59 typename: ID .

    $default  reduce using rule 59 (typename)


State 70

    6 decl_fun: FUNCTION type . ID LEFT_PAREN typedlpar RIGHT_PAREN block

    ID  shift, and go to state 125


State 71

   57 type: typename .

    $default  reduce using rule 57 (type)


State 72

   58 typename: primitivos .

    $default  reduce using rule 58 (typename)


State 73

   77 expr: MINUS identifier .

    $default  reduce using rule 77 (expr)


State 74

   73 block: LEFT_BRACE stmts . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 126


State 75

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
   95 expr_tern: TERNARY expr . QUESTION_MARK expr COLON expr TERNARY

    PLUS           shift, and go to state 103
    MINUS          shift, and go to state 104
    TIMES          shift, and go to state 105
    DIV            shift, and go to state 106
    MOD            shift, and go to state 107
    QUESTION_MARK  shift, and go to state 127
    OR             shift, and go to state 109
    AND            shift, and go to state 110
    EQUALS         shift, and go to state 111
    DIFF           shift, and go to state 112
    LT             shift, and go to state 113
    GT             shift, and go to state 114
    LEQ            shift, and go to state 115
    GEQ            shift, and go to state 116


State 76

  100 arrayAccess: LEFT_BRACKET . expr RIGHT_BRACKET
  101            | LEFT_BRACKET . expr RIGHT_BRACKET arrayAccess

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 128
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 77

  106 pointerAccess: ARROW . ID
  107              | ARROW . ID pointerAccess

    ID  shift, and go to state 129


State 78

   98 identifier: ID LEFT_PAREN . lpar RIGHT_PAREN

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    $default  reduce using rule 102 (lpar)

    expr        go to state 130
    expr_tern   go to state 54
    identifier  go to state 62
    lpar        go to state 131
    literal     go to state 56


State 79

   97 identifier: ID arrayAccess .

    $default  reduce using rule 97 (identifier)


State 80

   99 identifier: ID pointerAccess .

    $default  reduce using rule 99 (identifier)


State 81

   76 expr: LEFT_PAREN expr . RIGHT_PAREN
   79     | expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS         shift, and go to state 103
    MINUS        shift, and go to state 104
    TIMES        shift, and go to state 105
    DIV          shift, and go to state 106
    MOD          shift, and go to state 107
    RIGHT_PAREN  shift, and go to state 132
    OR           shift, and go to state 109
    AND          shift, and go to state 110
    EQUALS       shift, and go to state 111
    DIFF         shift, and go to state 112
    LT           shift, and go to state 113
    GT           shift, and go to state 114
    LEQ          shift, and go to state 115
    GEQ          shift, and go to state 116


State 82

   74 expr: INCREMENT expr .
   79     | expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 74 (expr)


State 83

   75 expr: DECREMENT expr .
   79     | expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 75 (expr)


State 84

   78 expr: NOT expr .
   79     | expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 78 (expr)


State 85

    0 $accept: prog $end .

    $default  accept


State 86

    3 stmts: stmt stmts .

    $default  reduce using rule 3 (stmts)


State 87

    8 cmd: cmd_decl_var SEMICOLON .

    $default  reduce using rule 8 (cmd)


State 88

   33 assign_extra: ASSIGN_PLUS .

    $default  reduce using rule 33 (assign_extra)


State 89

   34 assign_extra: ASSIGN_MINUS .

    $default  reduce using rule 34 (assign_extra)


State 90

   35 assign_extra: ASSIGN_MULT .

    $default  reduce using rule 35 (assign_extra)


State 91

   36 assign_extra: ASSIGN_DIV .

    $default  reduce using rule 36 (assign_extra)


State 92

   37 assign_extra: ASSIGN_MOD .

    $default  reduce using rule 37 (assign_extra)


State 93

   30 assign_expr: ASSIGN . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 133
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 94

   39 inc: INCREMENT .

    $default  reduce using rule 39 (inc)


State 95

   38 inc: DECREMENT .

    $default  reduce using rule 38 (inc)


State 96

   19 cmd_decl_var: all_decl_var assign_expr_maybe .

    $default  reduce using rule 19 (cmd_decl_var)


State 97

   21 assign_expr_maybe: assign_expr .

    $default  reduce using rule 21 (assign_expr_maybe)


State 98

   31 assign_expr: assign_extra . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 134
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 99

   32 assign_expr: inc .

    $default  reduce using rule 32 (assign_expr)


State 100

    9 cmd: inOut SEMICOLON .

    $default  reduce using rule 9 (cmd)


State 101

   27 hashtagzeromais: POINTER_VAL . hashtagzeromais

    POINTER_VAL  shift, and go to state 101

    $default  reduce using rule 26 (hashtagzeromais)

    hashtagzeromais  go to state 135


State 102

   24 decl_var_prim: primitivos hashtagzeromais . cochetezeromais ID

    LEFT_BRACKET  shift, and go to state 136

    $default  reduce using rule 28 (cochetezeromais)

    cochetezeromais  go to state 137


State 103

   81 expr: expr PLUS . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 138
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 104

   84 expr: expr MINUS . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 139
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 105

   82 expr: expr TIMES . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 140
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 106

   83 expr: expr DIV . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 141
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 107

   85 expr: expr MOD . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 142
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 108

   13 cmd: expr SEMICOLON .

    $default  reduce using rule 13 (cmd)


State 109

   80 expr: expr OR . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 143
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 110

   79 expr: expr AND . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 144
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 111

   86 expr: expr EQUALS . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 145
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 112

   87 expr: expr DIFF . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 146
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 113

   88 expr: expr LT . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 147
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 114

   89 expr: expr GT . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 148
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 115

   90 expr: expr LEQ . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 149
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 116

   91 expr: expr GEQ . expr

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 150
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 117

    7 cmd: identifier assign_expr . SEMICOLON

    SEMICOLON  shift, and go to state 151


State 118

   50 if: IF LEFT_PAREN expr . RIGHT_PAREN cmd ENDIF else
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS         shift, and go to state 103
    MINUS        shift, and go to state 104
    TIMES        shift, and go to state 105
    DIV          shift, and go to state 106
    MOD          shift, and go to state 107
    RIGHT_PAREN  shift, and go to state 152
    OR           shift, and go to state 109
    AND          shift, and go to state 110
    EQUALS       shift, and go to state 111
    DIFF         shift, and go to state 112
    LT           shift, and go to state 113
    GT           shift, and go to state 114
    LEQ          shift, and go to state 115
    GEQ          shift, and go to state 116


State 119

   53 switch: SWITCH LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE casezeromais RIGHT_BRACE
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS         shift, and go to state 103
    MINUS        shift, and go to state 104
    TIMES        shift, and go to state 105
    DIV          shift, and go to state 106
    MOD          shift, and go to state 107
    RIGHT_PAREN  shift, and go to state 153
    OR           shift, and go to state 109
    AND          shift, and go to state 110
    EQUALS       shift, and go to state 111
    DIFF         shift, and go to state 112
    LT           shift, and go to state 113
    GT           shift, and go to state 114
    LEQ          shift, and go to state 115
    GEQ          shift, and go to state 116


State 120

   48 for: FOR LEFT_PAREN expr . SEMICOLON expr SEMICOLON expr RIGHT_PAREN cmd
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS       shift, and go to state 103
    MINUS      shift, and go to state 104
    TIMES      shift, and go to state 105
    DIV        shift, and go to state 106
    MOD        shift, and go to state 107
    SEMICOLON  shift, and go to state 154
    OR         shift, and go to state 109
    AND        shift, and go to state 110
    EQUALS     shift, and go to state 111
    DIFF       shift, and go to state 112
    LT         shift, and go to state 113
    GT         shift, and go to state 114
    LEQ        shift, and go to state 115
    GEQ        shift, and go to state 116


State 121

   14 cmd: RETURN expr SEMICOLON .

    $default  reduce using rule 14 (cmd)


State 122

   42 in: READ LEFT_PAREN ID . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 155


State 123

   43 out: WRITE LEFT_PAREN ID . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 156


State 124

   17 cmd: EXIT WHEN expr . SEMICOLON
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS       shift, and go to state 103
    MINUS      shift, and go to state 104
    TIMES      shift, and go to state 105
    DIV        shift, and go to state 106
    MOD        shift, and go to state 107
    SEMICOLON  shift, and go to state 157
    OR         shift, and go to state 109
    AND        shift, and go to state 110
    EQUALS     shift, and go to state 111
    DIFF       shift, and go to state 112
    LT         shift, and go to state 113
    GT         shift, and go to state 114
    LEQ        shift, and go to state 115
    GEQ        shift, and go to state 116


State 125

    6 decl_fun: FUNCTION type ID . LEFT_PAREN typedlpar RIGHT_PAREN block

    LEFT_PAREN  shift, and go to state 158


State 126

   73 block: LEFT_BRACE stmts RIGHT_BRACE .

    $default  reduce using rule 73 (block)


State 127

   95 expr_tern: TERNARY expr QUESTION_MARK . expr COLON expr TERNARY

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 159
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 128

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
  100 arrayAccess: LEFT_BRACKET expr . RIGHT_BRACKET
  101            | LEFT_BRACKET expr . RIGHT_BRACKET arrayAccess

    PLUS           shift, and go to state 103
    MINUS          shift, and go to state 104
    TIMES          shift, and go to state 105
    DIV            shift, and go to state 106
    MOD            shift, and go to state 107
    RIGHT_BRACKET  shift, and go to state 160
    OR             shift, and go to state 109
    AND            shift, and go to state 110
    EQUALS         shift, and go to state 111
    DIFF           shift, and go to state 112
    LT             shift, and go to state 113
    GT             shift, and go to state 114
    LEQ            shift, and go to state 115
    GEQ            shift, and go to state 116


State 129

  106 pointerAccess: ARROW ID .
  107              | ARROW ID . pointerAccess

    ARROW  shift, and go to state 77

    $default  reduce using rule 106 (pointerAccess)

    pointerAccess  go to state 161


State 130

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
  103 lpar: expr . lparAfter

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    COMMA   shift, and go to state 162
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 104 (lparAfter)

    lparAfter  go to state 163


State 131

   98 identifier: ID LEFT_PAREN lpar . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 164


State 132

   76 expr: LEFT_PAREN expr RIGHT_PAREN .

    $default  reduce using rule 76 (expr)


State 133

   30 assign_expr: ASSIGN expr .
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 30 (assign_expr)


State 134

   31 assign_expr: assign_extra expr .
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 31 (assign_expr)


State 135

   27 hashtagzeromais: POINTER_VAL hashtagzeromais .

    $default  reduce using rule 27 (hashtagzeromais)


State 136

   29 cochetezeromais: LEFT_BRACKET . expr RIGHT_BRACKET cochetezeromais

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 165
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 137

   24 decl_var_prim: primitivos hashtagzeromais cochetezeromais . ID

    ID  shift, and go to state 166


State 138

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   81     | expr PLUS expr .
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 81 (expr)


State 139

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   84     | expr MINUS expr .
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 84 (expr)


State 140

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   82     | expr TIMES expr .
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 82 (expr)


State 141

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   83     | expr DIV expr .
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 83 (expr)


State 142

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   85     | expr MOD expr .
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 85 (expr)


State 143

   79 expr: expr . AND expr
   80     | expr . OR expr
   80     | expr OR expr .
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 80 (expr)


State 144

   79 expr: expr . AND expr
   79     | expr AND expr .
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 79 (expr)


State 145

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   86     | expr EQUALS expr .
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 86 (expr)


State 146

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   87     | expr DIFF expr .
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 87 (expr)


State 147

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   88     | expr LT expr .
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 88 (expr)


State 148

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   89     | expr GT expr .
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 89 (expr)


State 149

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   90     | expr LEQ expr .
   91     | expr . GEQ expr

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 90 (expr)


State 150

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
   91     | expr GEQ expr .

    EQUALS  error (nonassociative)
    DIFF    error (nonassociative)
    LT      error (nonassociative)
    GT      error (nonassociative)
    LEQ     error (nonassociative)
    GEQ     error (nonassociative)

    $default  reduce using rule 91 (expr)


State 151

    7 cmd: identifier assign_expr SEMICOLON .

    $default  reduce using rule 7 (cmd)


State 152

   50 if: IF LEFT_PAREN expr RIGHT_PAREN . cmd ENDIF else

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    cmd             go to state 167
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 153

   53 switch: SWITCH LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE casezeromais RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 168


State 154

   48 for: FOR LEFT_PAREN expr SEMICOLON . expr SEMICOLON expr RIGHT_PAREN cmd

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 169
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 155

   42 in: READ LEFT_PAREN ID RIGHT_PAREN .

    $default  reduce using rule 42 (in)


State 156

   43 out: WRITE LEFT_PAREN ID RIGHT_PAREN .

    $default  reduce using rule 43 (out)


State 157

   17 cmd: EXIT WHEN expr SEMICOLON .

    $default  reduce using rule 17 (cmd)


State 158

    6 decl_fun: FUNCTION type ID LEFT_PAREN . typedlpar RIGHT_PAREN block

    INT   shift, and go to state 13
    REAL  shift, and go to state 14
    CHAR  shift, and go to state 15
    STR   shift, and go to state 16
    BOOL  shift, and go to state 17
    VOID  shift, and go to state 18
    ID    shift, and go to state 69

    $default  reduce using rule 66 (typedlpar)

    type        go to state 170
    typename    go to state 71
    primitivos  go to state 72
    typedlpar   go to state 171
    parameter   go to state 172


State 159

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
   95 expr_tern: TERNARY expr QUESTION_MARK expr . COLON expr TERNARY

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    COLON   shift, and go to state 173
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116


State 160

  100 arrayAccess: LEFT_BRACKET expr RIGHT_BRACKET .
  101            | LEFT_BRACKET expr RIGHT_BRACKET . arrayAccess

    LEFT_BRACKET  shift, and go to state 76

    $default  reduce using rule 100 (arrayAccess)

    arrayAccess  go to state 174


State 161

  107 pointerAccess: ARROW ID pointerAccess .

    $default  reduce using rule 107 (pointerAccess)


State 162

  105 lparAfter: COMMA . expr lparAfter

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 175
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 163

  103 lpar: expr lparAfter .

    $default  reduce using rule 103 (lpar)


State 164

   98 identifier: ID LEFT_PAREN lpar RIGHT_PAREN .

    $default  reduce using rule 98 (identifier)


State 165

   29 cochetezeromais: LEFT_BRACKET expr . RIGHT_BRACKET cochetezeromais
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS           shift, and go to state 103
    MINUS          shift, and go to state 104
    TIMES          shift, and go to state 105
    DIV            shift, and go to state 106
    MOD            shift, and go to state 107
    RIGHT_BRACKET  shift, and go to state 176
    OR             shift, and go to state 109
    AND            shift, and go to state 110
    EQUALS         shift, and go to state 111
    DIFF           shift, and go to state 112
    LT             shift, and go to state 113
    GT             shift, and go to state 114
    LEQ            shift, and go to state 115
    GEQ            shift, and go to state 116


State 166

   24 decl_var_prim: primitivos hashtagzeromais cochetezeromais ID .

    $default  reduce using rule 24 (decl_var_prim)


State 167

   50 if: IF LEFT_PAREN expr RIGHT_PAREN cmd . ENDIF else

    ENDIF  shift, and go to state 177


State 168

   53 switch: SWITCH LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . casezeromais RIGHT_BRACE

    CASE  shift, and go to state 178

    $default  reduce using rule 54 (casezeromais)

    casezeromais  go to state 179
    case          go to state 180


State 169

   48 for: FOR LEFT_PAREN expr SEMICOLON expr . SEMICOLON expr RIGHT_PAREN cmd
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS       shift, and go to state 103
    MINUS      shift, and go to state 104
    TIMES      shift, and go to state 105
    DIV        shift, and go to state 106
    MOD        shift, and go to state 107
    SEMICOLON  shift, and go to state 181
    OR         shift, and go to state 109
    AND        shift, and go to state 110
    EQUALS     shift, and go to state 111
    DIFF       shift, and go to state 112
    LT         shift, and go to state 113
    GT         shift, and go to state 114
    LEQ        shift, and go to state 115
    GEQ        shift, and go to state 116


State 170

   70 parameter: type . parameterAfter

    REFERENCE  shift, and go to state 182
    ID         shift, and go to state 183

    parameterAfter  go to state 184


State 171

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar . RIGHT_PAREN block

    RIGHT_PAREN  shift, and go to state 185


State 172

   67 typedlpar: parameter . typedlparAfter

    COMMA  shift, and go to state 186

    $default  reduce using rule 68 (typedlparAfter)

    typedlparAfter  go to state 187


State 173

   95 expr_tern: TERNARY expr QUESTION_MARK expr COLON . expr TERNARY

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 188
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 174

  101 arrayAccess: LEFT_BRACKET expr RIGHT_BRACKET arrayAccess .

    $default  reduce using rule 101 (arrayAccess)


State 175

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
  105 lparAfter: COMMA expr . lparAfter

    PLUS    shift, and go to state 103
    MINUS   shift, and go to state 104
    TIMES   shift, and go to state 105
    DIV     shift, and go to state 106
    MOD     shift, and go to state 107
    COMMA   shift, and go to state 162
    OR      shift, and go to state 109
    AND     shift, and go to state 110
    EQUALS  shift, and go to state 111
    DIFF    shift, and go to state 112
    LT      shift, and go to state 113
    GT      shift, and go to state 114
    LEQ     shift, and go to state 115
    GEQ     shift, and go to state 116

    $default  reduce using rule 104 (lparAfter)

    lparAfter  go to state 189


State 176

   29 cochetezeromais: LEFT_BRACKET expr RIGHT_BRACKET . cochetezeromais

    LEFT_BRACKET  shift, and go to state 136

    $default  reduce using rule 28 (cochetezeromais)

    cochetezeromais  go to state 190


State 177

   50 if: IF LEFT_PAREN expr RIGHT_PAREN cmd ENDIF . else

    ELSE  shift, and go to state 191

    $default  reduce using rule 51 (else)

    else  go to state 192


State 178

   56 case: CASE . literal COLON stmts

    TRUE       shift, and go to state 20
    FALSE      shift, and go to state 21
    NUMBER     shift, and go to state 22
    CHARACTER  shift, and go to state 23
    STRING     shift, and go to state 24

    literal  go to state 193


State 179

   53 switch: SWITCH LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE casezeromais . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 194


State 180

   55 casezeromais: case . casezeromais

    CASE  shift, and go to state 178

    $default  reduce using rule 54 (casezeromais)

    casezeromais  go to state 195
    case          go to state 180


State 181

   48 for: FOR LEFT_PAREN expr SEMICOLON expr SEMICOLON . expr RIGHT_PAREN cmd

    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    expr        go to state 196
    expr_tern   go to state 54
    identifier  go to state 62
    literal     go to state 56


State 182

   72 parameterAfter: REFERENCE . ID

    ID  shift, and go to state 197


State 183

   71 parameterAfter: ID .

    $default  reduce using rule 71 (parameterAfter)


State 184

   70 parameter: type parameterAfter .

    $default  reduce using rule 70 (parameter)


State 185

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN . block

    LEFT_BRACE  shift, and go to state 25

    block  go to state 198


State 186

   69 typedlparAfter: COMMA . parameter typedlparAfter

    INT   shift, and go to state 13
    REAL  shift, and go to state 14
    CHAR  shift, and go to state 15
    STR   shift, and go to state 16
    BOOL  shift, and go to state 17
    VOID  shift, and go to state 18
    ID    shift, and go to state 69

    type        go to state 170
    typename    go to state 71
    primitivos  go to state 72
    parameter   go to state 199


State 187

   67 typedlpar: parameter typedlparAfter .

    $default  reduce using rule 67 (typedlpar)


State 188

   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr
   95 expr_tern: TERNARY expr QUESTION_MARK expr COLON expr . TERNARY

    PLUS     shift, and go to state 103
    MINUS    shift, and go to state 104
    TIMES    shift, and go to state 105
    DIV      shift, and go to state 106
    MOD      shift, and go to state 107
    TERNARY  shift, and go to state 200
    OR       shift, and go to state 109
    AND      shift, and go to state 110
    EQUALS   shift, and go to state 111
    DIFF     shift, and go to state 112
    LT       shift, and go to state 113
    GT       shift, and go to state 114
    LEQ      shift, and go to state 115
    GEQ      shift, and go to state 116


State 189

  105 lparAfter: COMMA expr lparAfter .

    $default  reduce using rule 105 (lparAfter)


State 190

   29 cochetezeromais: LEFT_BRACKET expr RIGHT_BRACKET cochetezeromais .

    $default  reduce using rule 29 (cochetezeromais)


State 191

   52 else: ELSE . cmd

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    cmd             go to state 201
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 192

   50 if: IF LEFT_PAREN expr RIGHT_PAREN cmd ENDIF else .

    $default  reduce using rule 50 (if)


State 193

   56 case: CASE literal . COLON stmts

    COLON  shift, and go to state 202


State 194

   53 switch: SWITCH LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE casezeromais RIGHT_BRACE .

    $default  reduce using rule 53 (switch)


State 195

   55 casezeromais: case casezeromais .

    $default  reduce using rule 55 (casezeromais)


State 196

   48 for: FOR LEFT_PAREN expr SEMICOLON expr SEMICOLON expr . RIGHT_PAREN cmd
   79 expr: expr . AND expr
   80     | expr . OR expr
   81     | expr . PLUS expr
   82     | expr . TIMES expr
   83     | expr . DIV expr
   84     | expr . MINUS expr
   85     | expr . MOD expr
   86     | expr . EQUALS expr
   87     | expr . DIFF expr
   88     | expr . LT expr
   89     | expr . GT expr
   90     | expr . LEQ expr
   91     | expr . GEQ expr

    PLUS         shift, and go to state 103
    MINUS        shift, and go to state 104
    TIMES        shift, and go to state 105
    DIV          shift, and go to state 106
    MOD          shift, and go to state 107
    RIGHT_PAREN  shift, and go to state 203
    OR           shift, and go to state 109
    AND          shift, and go to state 110
    EQUALS       shift, and go to state 111
    DIFF         shift, and go to state 112
    LT           shift, and go to state 113
    GT           shift, and go to state 114
    LEQ          shift, and go to state 115
    GEQ          shift, and go to state 116


State 197

   72 parameterAfter: REFERENCE ID .

    $default  reduce using rule 72 (parameterAfter)


State 198

    6 decl_fun: FUNCTION type ID LEFT_PAREN typedlpar RIGHT_PAREN block .

    $default  reduce using rule 6 (decl_fun)


State 199

   69 typedlparAfter: COMMA parameter . typedlparAfter

    COMMA  shift, and go to state 186

    $default  reduce using rule 68 (typedlparAfter)

    typedlparAfter  go to state 204


State 200

   95 expr_tern: TERNARY expr QUESTION_MARK expr COLON expr TERNARY .

    $default  reduce using rule 95 (expr_tern)


State 201

   52 else: ELSE cmd .

    $default  reduce using rule 52 (else)


State 202

   56 case: CASE literal COLON . stmts

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    FUNCTION    shift, and go to state 12
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    $default  reduce using rule 2 (stmts)

    stmts           go to state 205
    stmt            go to state 34
    decl_fun        go to state 35
    cmd             go to state 36
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 203

   48 for: FOR LEFT_PAREN expr SEMICOLON expr SEMICOLON expr RIGHT_PAREN . cmd

    IF          shift, and go to state 1
    SWITCH      shift, and go to state 2
    FOR         shift, and go to state 3
    LOOP        shift, and go to state 4
    RETURN      shift, and go to state 5
    CONST       shift, and go to state 6
    BREAK       shift, and go to state 7
    CONTINUE    shift, and go to state 8
    READ        shift, and go to state 9
    WRITE       shift, and go to state 10
    EXIT        shift, and go to state 11
    INT         shift, and go to state 13
    REAL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STR         shift, and go to state 16
    BOOL        shift, and go to state 17
    VOID        shift, and go to state 18
    MINUS       shift, and go to state 19
    TRUE        shift, and go to state 20
    FALSE       shift, and go to state 21
    NUMBER      shift, and go to state 22
    CHARACTER   shift, and go to state 23
    STRING      shift, and go to state 24
    LEFT_BRACE  shift, and go to state 25
    TERNARY     shift, and go to state 26
    ID          shift, and go to state 27
    LEFT_PAREN  shift, and go to state 28
    INCREMENT   shift, and go to state 29
    DECREMENT   shift, and go to state 30
    NOT         shift, and go to state 31

    cmd             go to state 206
    cmd_decl_var    go to state 37
    all_decl_var    go to state 38
    decl_var_prim   go to state 39
    const_decl_var  go to state 40
    inOut           go to state 41
    in              go to state 42
    out             go to state 43
    cmd_loop        go to state 44
    cmd_cond        go to state 45
    cmd_switch      go to state 46
    for             go to state 47
    loop            go to state 48
    if              go to state 49
    switch          go to state 50
    primitivos      go to state 51
    block           go to state 52
    expr            go to state 53
    expr_tern       go to state 54
    identifier      go to state 55
    literal         go to state 56


State 204

   69 typedlparAfter: COMMA parameter typedlparAfter .

    $default  reduce using rule 69 (typedlparAfter)


State 205

   56 case: CASE literal COLON stmts .

    $default  reduce using rule 56 (case)


State 206

   48 for: FOR LEFT_PAREN expr SEMICOLON expr SEMICOLON expr RIGHT_PAREN cmd .

    $default  reduce using rule 48 (for)
